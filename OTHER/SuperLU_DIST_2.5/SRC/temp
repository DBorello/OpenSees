1,4c1,2
< /*! @file
<  * \brief Implements parallel symbolic factorization
<  *
<  * <pre>
---
> 
> /*
12c10,13
<  *
---
>  */
> 
> 
> /* 
19c20
<  * </pre>
---
>  *
22,23d22
< 
< 
130,132c129,147
< /*! \brief
<  *
<  * <pre> 
---
> float symbfact_dist
> /************************************************************************/
> (
>  int         nprocs_num,  /* Input - no of processors */
>  int         nprocs_symb, /* Input - no of processors for the symbolic
> 			     factorization */
>  SuperMatrix *A,          /* Input - distributed input matrix */
>  int_t       *perm_c,     /* Input - column permutation */
>  int_t       *perm_r,     /* Input - row permutation */
>  int_t       *sizes,      /* Input - sizes of each node in the separator tree */
>  int_t       *fstVtxSep,  /* Input - first vertex of each node in the tree */
>  Pslu_freeable_t *Pslu_freeable, /* Output - local L and U structure, 
> 				    global to local indexing information */
>  MPI_Comm    *num_comm,   /* Input - communicator for numerical factorization */
>  MPI_Comm    *symb_comm,  /* Input - communicator for symbolic factorization */
>  mem_usage_t *symb_mem_usage
>  )
> {
> /* 
214c229
<  * </pre>
---
>  *
216,234d230
< float symbfact_dist
< /************************************************************************/
< (
<  int         nprocs_num,  /* Input - no of processors */
<  int         nprocs_symb, /* Input - no of processors for the symbolic
< 			     factorization */
<  SuperMatrix *A,          /* Input - distributed input matrix */
<  int_t       *perm_c,     /* Input - column permutation */
<  int_t       *perm_r,     /* Input - row permutation */
<  int_t       *sizes,      /* Input - sizes of each node in the separator tree */
<  int_t       *fstVtxSep,  /* Input - first vertex of each node in the tree */
<  Pslu_freeable_t *Pslu_freeable, /* Output - local L and U structure, 
< 				    global to local indexing information */
<  MPI_Comm    *num_comm,   /* Input - communicator for numerical factorization */
<  MPI_Comm    *symb_comm,  /* Input - communicator for symbolic factorization */
<  mem_usage_t *symb_mem_usage
<  )
< {
< 
756,762c752
< /*! \brief
<  * <pre> 
<  * Purpose
<  * =======
<  * Initialize relaxation parameters and statistics variables
<  * </pre>
<  */
---
> 
768c758,762
< 
---
> /* 
>  * Purpose
>  * =======
>  * Initialize relaxation parameters and statistics variables
>  */
804,814d797
< /*! \brief
<  *
<  * <pre>
<  * Purpose
<  * =======
<  * 
<  * Computes an estimation of the number of elements in columns of L
<  * and rows of U.  Stores this information in cntelt_vtcs, and it will
<  * be used in the right-looking symbolic factorization.
<  * </pre>
<  */
830c813,820
< 
---
> /* 
>  * Purpose
>  * =======
>  * 
>  * Computes an estimation of the number of elements in columns of L
>  * and rows of U.  Stores this information in cntelt_vtcs, and it will
>  * be used in the right-looking symbolic factorization.
>  */
960,962c950,967
< /*! \brief
<  *
<  * <pre>
---
> static float
> symbfact_mapVtcs
> (
>  int iam,             /* Input -process number */
>  int nprocs_num,      /* Input -number of processors */
>  int nprocs_symb,     /* Input -number of procs for symbolic factorization */
>  SuperMatrix *A,      /* Input -input distributed matrix A */
>  int_t *fstVtxSep,    /* Input -first vertex in each separator */
>  int_t *sizes,        /* Input -size of each separator in the separator tree */
>  Pslu_freeable_t *Pslu_freeable, /* Output -globToLoc and maxNvtcsPProc 
> 				    computed */
>  vtcsInfo_symbfact_t *VInfo, /* Output -local info on vertices distribution */
>  int_t *tempArray,    /* Input -temp array of size n = order of the matrix */
>  int_t  maxSzBlk,     /* Input -maximum number of vertices in a block */
>  psymbfact_stat_t *PS /* Input/Output -statistics */
>  ) 
> {
> /* 
985c990
<  * </pre>
---
>  *
987,1004d991
< static float
< symbfact_mapVtcs
< (
<  int iam,             /* Input -process number */
<  int nprocs_num,      /* Input -number of processors */
<  int nprocs_symb,     /* Input -number of procs for symbolic factorization */
<  SuperMatrix *A,      /* Input -input distributed matrix A */
<  int_t *fstVtxSep,    /* Input -first vertex in each separator */
<  int_t *sizes,        /* Input -size of each separator in the separator tree */
<  Pslu_freeable_t *Pslu_freeable, /* Output -globToLoc and maxNvtcsPProc 
< 				    computed */
<  vtcsInfo_symbfact_t *VInfo, /* Output -local info on vertices distribution */
<  int_t *tempArray,    /* Input -temp array of size n = order of the matrix */
<  int_t  maxSzBlk,     /* Input -maximum number of vertices in a block */
<  psymbfact_stat_t *PS /* Input/Output -statistics */
<  ) 
< {
< 
1199,1210d1185
< /*! \brief
<  *
<  * <pre>
<  * Purpose 
<  * =======
<  *
<  * Distribute input matrix A for the symbolic factorization routine.
<  * Only structural information is distributed.  The redistributed
<  * matrix has its rows and columns permuted according to perm_r and
<  * perm_c. A is not modified during this routine.
<  * </pre>
<  */
1231c1206,1215
< 
---
> /*
>  * Purpose 
>  * =======
>  *
>  * Distribute input matrix A for the symbolic factorization routine.
>  * Only structural information is distributed.  The redistributed
>  * matrix has its rows and columns permuted according to perm_r and
>  * perm_c. A is not modified during this routine.
>  *
>  */
1466a1451,1452
>     intBuf1[iam]=0; /* This corresponds to nnzToSend[iam] */
>     intBuf3[iam]=0; /* This corresponds to nnzToRecv[iam] */
1469a1456,1458
>     i = nnzToRecv[iam]; 
>     nnzToRecv[iam] = 0;
>     nnzToSend[iam] = 0;
1472,1475d1460
<     i = nnzToRecv[iam]; /* This corresponds to nnzToRecv[iam] */
<     intBuf3[iam] = 0;
<     intBuf1[iam] = 0;
< 
1478a1464
> 
1481c1467
< #endif
---
> #else  /* Default */
1482a1469
> #endif
1603,1613d1589
< /*! \brief
<  *
<  * <pre>
<  * Allocate storage for data structures necessary for pruned graphs.
<  * For those unpredictable size, make a guess as FILL * n.
<  * Return value:
<  *     0 if enough memory was available;
<  *     otherwise, return the amount of space intended to allocate 
<  *     when memory allocation failure occurred.
<  * </pre>
<  */
1623c1599,1606
< 
---
> /*
>  * Allocate storage for data structures necessary for pruned graphs.
>  * For those unpredictable size, make a guess as FILL * n.
>  * Return value:
>  *     0 if enough memory was available;
>  *     otherwise, return the amount of space intended to allocate 
>  *     when memory allocation failure occurred.
>  */
1706,1716d1688
< /*! \brief
<  *
<  * <pre>
<  * Allocate storage for data structures necessary for pruned graphs.
<  * For those unpredictable size, make a guess as FILL * n.
<  * Return value:
<  *     0 if enough memory was available;
<  *     otherwise, return the amount of space intended to allocate 
<  *     when memory allocation failure occurred.
<  * </pre>
<  */
1728c1700,1707
< 
---
> /*
>  * Allocate storage for data structures necessary for pruned graphs.
>  * For those unpredictable size, make a guess as FILL * n.
>  * Return value:
>  *     0 if enough memory was available;
>  *     otherwise, return the amount of space intended to allocate 
>  *     when memory allocation failure occurred.
>  */
1796,1806d1774
< /*! \brief
<  *
<  * <pre>
<  * Allocate storage for the data structures common to symbolic factorization
<  * routines. For those unpredictable size, make a guess as FILL * nnz(A).
<  * Return value:
<  *     0 if enough memory was available;
<  *     otherwise, return the amount of space intended to allocate 
<  *     when memory allocation failure occurred.
<  * </pre>
<  */
1821c1789,1796
< 
---
> /*
>  * Allocate storage for the data structures common to symbolic factorization
>  * routines. For those unpredictable size, make a guess as FILL * nnz(A).
>  * Return value:
>  *     0 if enough memory was available;
>  *     otherwise, return the amount of space intended to allocate 
>  *     when memory allocation failure occurred.
>  */
1990d1964
< 
2846,2848c2820
< /*! \brief
<  *
<  * <pre>
---
> /*
2854d2825
<  * </pre>
4013,4016c3984
< /*! \brief
< 
< <pre> 
<  all processors affected to current node must call this routine
---
> /* all processors affected to current node must call this routine
4019,4021c3987,3988
<    MPI_allreduce among all processors affected to curent node 
< </pre>
< */
---
>    MPI_allreduce among all processors affected to curent node */
> 
